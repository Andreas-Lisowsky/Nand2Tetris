// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    ////Decode 
    //Decode Register Writing
    And(a=instruction[15],b=instruction[5],out=loadAtemp);
    Not(in=instruction[15],out=notCinst);
    Or(a=loadAtemp,b=notCinst,out=loadA);
    And(a=instruction[15],b=instruction[4],out=loadD);
    And(a=instruction[15],b=instruction[3],out=writeM);
    
    //Decode Jump Condition
    And(a=instruction[2],b=ng,out=j1comp);
    
    And(a=instruction[1],b=zr,out=j2comp);
   
    Not(in=ng,out=notng);
    Not(in=zr,out=notzr);
    And(a=instruction[0],b=notng,out=j3temp1);
    And(a=instruction[0],b=notzr,out=j3temp2);
    And(a=j3temp1,b=j3temp2,out=j3comp);
    
    Or8Way(in[7]=j1comp,in[6]=j2comp,in[5]=j3comp,in[0..4]=false,out=jmptemp1);
    And(a=instruction[15],b=jmptemp1,out=jmp);
    //No jump if all j-s are 0 (Special Case)
    //Or8Way(in[7]=instruction[2],in[6]=instruction[1],in[5]=instruction[0],in[0..4]=false,out=jmpspecialcase);
    //And(a=jmptemp2,b=jmpspecialcase,out=jmp);
    Not(in=jmp,out=njmp);
    
    //Register A and D
    ARegister(in=outmux1,load=loadA,out=A,out[0..14]=addressM);
    DRegister(in=outMfb,load=loadD,out=D);
    
    //PC
    PC(in=A,load=jmp,inc=njmp,reset=reset,out[0..14]=pc);
    
    //Mux 1 and 2
    Mux16(a=instruction,b=outMfb,sel=instruction[15],out=outmux1);
    Mux16(a=A,b=inM,sel=instruction[12],out=outmux2);
    
    //ALU
    ALU(x=D,y=outmux2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=outMfb,zr=zr,ng=ng);
    
}