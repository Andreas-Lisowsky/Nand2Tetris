// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    
    field Array contained_chars;
    field int length,max_length;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        
        if(maxLength = 0) {
            
            let maxLength = 1;
        }
        
        let contained_chars = Array.new(maxLength);
        let length = 0;
        let max_length = maxLength;
        
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        
        do Memory.deAlloc(this);
        
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        
        if(j < length) {
            
            return contained_chars[j];
        }
        return null;
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        
        if((j < length) & (j > (-1))) {
            
            let contained_chars[j] = c;
        }
        
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        
        if(length < max_length) {
            
            let contained_chars[length] = c;
            let length = length+1;
        }
        
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        
        if(length > 0) {
            
            let length = length-1;
        }
        
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        
        var int j,val;
        var boolean neg;
        
        let j = 0;
        let val = 0;
        let neg = false;
        
        if(charAt(j) = 45) {
            
            let j = 1;
            let neg = true;
        }
        
        //Only convert digits.
        while((j < length) & (charAt(j) > 47) & (charAt(j) < 58)) {
            
            let val = Math.multiply(val,10) + charAt(j) - 48;
            
            let j = j+1;
        }
        
        if(neg) {
            
            return -val;
        }
        else {
         
            return val;
        }
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        
        let length = 0;
        
        if(number < 0) {
            
            let number = -number;
            do appendChar(45);
        }
        
        do setInt_recursion(number);
        
        return;
    }
    
    method void setInt_recursion(int number) {
        
        var int new_number;
        
        if(number < 10) {
            
            do appendChar(number+48);
        }
        else {
            
            let new_number = Math.divide(number,10);
            do setInt_recursion(new_number);
            do appendChar((number - Math.multiply(new_number,10)) + 48);
        }
        
        return;
    }
    
    /** Returns the new line character. */
    function char newLine() {
        
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        
        return 34;
    }
}
